// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BlazorTemplate.Migrations
{
    [DbContext(typeof(AppDataContext))]
    [Migration("20230617110350_01_users")]
    partial class _01_users
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BlazorTemplate.Data.WeatherForecast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateTimeAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Summary")
                        .HasColumnType("text")
                        .HasColumnName("summary");

                    b.Property<int>("TemperatureC")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("forecasts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateTimeAt = new DateTime(2023, 6, 18, 11, 3, 50, 657, DateTimeKind.Utc).AddTicks(3060),
                            Summary = "Warm",
                            TemperatureC = -4
                        },
                        new
                        {
                            Id = 2,
                            DateTimeAt = new DateTime(2023, 6, 19, 11, 3, 50, 657, DateTimeKind.Utc).AddTicks(3060),
                            Summary = "Hot",
                            TemperatureC = 0
                        },
                        new
                        {
                            Id = 3,
                            DateTimeAt = new DateTime(2023, 6, 20, 11, 3, 50, 657, DateTimeKind.Utc).AddTicks(3060),
                            Summary = "Hot",
                            TemperatureC = -1
                        },
                        new
                        {
                            Id = 4,
                            DateTimeAt = new DateTime(2023, 6, 21, 11, 3, 50, 657, DateTimeKind.Utc).AddTicks(3060),
                            Summary = "Hot",
                            TemperatureC = 20
                        },
                        new
                        {
                            Id = 5,
                            DateTimeAt = new DateTime(2023, 6, 22, 11, 3, 50, 657, DateTimeKind.Utc).AddTicks(3060),
                            Summary = "Balmy",
                            TemperatureC = -20
                        },
                        new
                        {
                            Id = 6,
                            DateTimeAt = new DateTime(2023, 6, 23, 11, 3, 50, 657, DateTimeKind.Utc).AddTicks(3060),
                            Summary = "Balmy",
                            TemperatureC = 54
                        },
                        new
                        {
                            Id = 7,
                            DateTimeAt = new DateTime(2023, 6, 24, 11, 3, 50, 657, DateTimeKind.Utc).AddTicks(3060),
                            Summary = "Freezing",
                            TemperatureC = 35
                        },
                        new
                        {
                            Id = 8,
                            DateTimeAt = new DateTime(2023, 6, 25, 11, 3, 50, 657, DateTimeKind.Utc).AddTicks(3060),
                            Summary = "Chilly",
                            TemperatureC = 5
                        },
                        new
                        {
                            Id = 9,
                            DateTimeAt = new DateTime(2023, 6, 26, 11, 3, 50, 657, DateTimeKind.Utc).AddTicks(3060),
                            Summary = "Hot",
                            TemperatureC = 41
                        },
                        new
                        {
                            Id = 10,
                            DateTimeAt = new DateTime(2023, 6, 27, 11, 3, 50, 657, DateTimeKind.Utc).AddTicks(3060),
                            Summary = "Hot",
                            TemperatureC = 12
                        },
                        new
                        {
                            Id = 11,
                            DateTimeAt = new DateTime(2023, 6, 28, 11, 3, 50, 657, DateTimeKind.Utc).AddTicks(3060),
                            Summary = "Chilly",
                            TemperatureC = 47
                        },
                        new
                        {
                            Id = 12,
                            DateTimeAt = new DateTime(2023, 6, 29, 11, 3, 50, 657, DateTimeKind.Utc).AddTicks(3060),
                            Summary = "Bracing",
                            TemperatureC = -15
                        },
                        new
                        {
                            Id = 13,
                            DateTimeAt = new DateTime(2023, 6, 30, 11, 3, 50, 657, DateTimeKind.Utc).AddTicks(3060),
                            Summary = "Mild",
                            TemperatureC = 53
                        },
                        new
                        {
                            Id = 14,
                            DateTimeAt = new DateTime(2023, 7, 1, 11, 3, 50, 657, DateTimeKind.Utc).AddTicks(3060),
                            Summary = "Freezing",
                            TemperatureC = 38
                        },
                        new
                        {
                            Id = 15,
                            DateTimeAt = new DateTime(2023, 7, 2, 11, 3, 50, 657, DateTimeKind.Utc).AddTicks(3060),
                            Summary = "Warm",
                            TemperatureC = 50
                        },
                        new
                        {
                            Id = 16,
                            DateTimeAt = new DateTime(2023, 7, 3, 11, 3, 50, 657, DateTimeKind.Utc).AddTicks(3060),
                            Summary = "Sweltering",
                            TemperatureC = 12
                        },
                        new
                        {
                            Id = 17,
                            DateTimeAt = new DateTime(2023, 7, 4, 11, 3, 50, 657, DateTimeKind.Utc).AddTicks(3060),
                            Summary = "Sweltering",
                            TemperatureC = 28
                        },
                        new
                        {
                            Id = 18,
                            DateTimeAt = new DateTime(2023, 7, 5, 11, 3, 50, 657, DateTimeKind.Utc).AddTicks(3060),
                            Summary = "Sweltering",
                            TemperatureC = -5
                        },
                        new
                        {
                            Id = 19,
                            DateTimeAt = new DateTime(2023, 7, 6, 11, 3, 50, 657, DateTimeKind.Utc).AddTicks(3060),
                            Summary = "Warm",
                            TemperatureC = 46
                        },
                        new
                        {
                            Id = 20,
                            DateTimeAt = new DateTime(2023, 7, 7, 11, 3, 50, 657, DateTimeKind.Utc).AddTicks(3060),
                            Summary = "Sweltering",
                            TemperatureC = 35
                        },
                        new
                        {
                            Id = 21,
                            DateTimeAt = new DateTime(2023, 7, 8, 11, 3, 50, 657, DateTimeKind.Utc).AddTicks(3060),
                            Summary = "Scorching",
                            TemperatureC = 3
                        },
                        new
                        {
                            Id = 22,
                            DateTimeAt = new DateTime(2023, 7, 9, 11, 3, 50, 657, DateTimeKind.Utc).AddTicks(3060),
                            Summary = "Cool",
                            TemperatureC = 50
                        },
                        new
                        {
                            Id = 23,
                            DateTimeAt = new DateTime(2023, 7, 10, 11, 3, 50, 657, DateTimeKind.Utc).AddTicks(3060),
                            Summary = "Cool",
                            TemperatureC = -8
                        },
                        new
                        {
                            Id = 24,
                            DateTimeAt = new DateTime(2023, 7, 11, 11, 3, 50, 657, DateTimeKind.Utc).AddTicks(3060),
                            Summary = "Chilly",
                            TemperatureC = 18
                        },
                        new
                        {
                            Id = 25,
                            DateTimeAt = new DateTime(2023, 7, 12, 11, 3, 50, 657, DateTimeKind.Utc).AddTicks(3060),
                            Summary = "Mild",
                            TemperatureC = 41
                        },
                        new
                        {
                            Id = 26,
                            DateTimeAt = new DateTime(2023, 7, 13, 11, 3, 50, 657, DateTimeKind.Utc).AddTicks(3060),
                            Summary = "Mild",
                            TemperatureC = 33
                        },
                        new
                        {
                            Id = 27,
                            DateTimeAt = new DateTime(2023, 7, 14, 11, 3, 50, 657, DateTimeKind.Utc).AddTicks(3060),
                            Summary = "Scorching",
                            TemperatureC = 25
                        },
                        new
                        {
                            Id = 28,
                            DateTimeAt = new DateTime(2023, 7, 15, 11, 3, 50, 657, DateTimeKind.Utc).AddTicks(3060),
                            Summary = "Scorching",
                            TemperatureC = 7
                        },
                        new
                        {
                            Id = 29,
                            DateTimeAt = new DateTime(2023, 7, 16, 11, 3, 50, 657, DateTimeKind.Utc).AddTicks(3060),
                            Summary = "Scorching",
                            TemperatureC = -15
                        },
                        new
                        {
                            Id = 30,
                            DateTimeAt = new DateTime(2023, 7, 17, 11, 3, 50, 657, DateTimeKind.Utc).AddTicks(3060),
                            Summary = "Freezing",
                            TemperatureC = -9
                        },
                        new
                        {
                            Id = 31,
                            DateTimeAt = new DateTime(2023, 7, 18, 11, 3, 50, 657, DateTimeKind.Utc).AddTicks(3060),
                            Summary = "Warm",
                            TemperatureC = 6
                        },
                        new
                        {
                            Id = 32,
                            DateTimeAt = new DateTime(2023, 7, 19, 11, 3, 50, 657, DateTimeKind.Utc).AddTicks(3060),
                            Summary = "Balmy",
                            TemperatureC = 49
                        },
                        new
                        {
                            Id = 33,
                            DateTimeAt = new DateTime(2023, 7, 20, 11, 3, 50, 657, DateTimeKind.Utc).AddTicks(3060),
                            Summary = "Freezing",
                            TemperatureC = 53
                        },
                        new
                        {
                            Id = 34,
                            DateTimeAt = new DateTime(2023, 7, 21, 11, 3, 50, 657, DateTimeKind.Utc).AddTicks(3060),
                            Summary = "Warm",
                            TemperatureC = 2
                        },
                        new
                        {
                            Id = 35,
                            DateTimeAt = new DateTime(2023, 7, 22, 11, 3, 50, 657, DateTimeKind.Utc).AddTicks(3060),
                            Summary = "Sweltering",
                            TemperatureC = 47
                        },
                        new
                        {
                            Id = 36,
                            DateTimeAt = new DateTime(2023, 7, 23, 11, 3, 50, 657, DateTimeKind.Utc).AddTicks(3060),
                            Summary = "Scorching",
                            TemperatureC = 0
                        },
                        new
                        {
                            Id = 37,
                            DateTimeAt = new DateTime(2023, 7, 24, 11, 3, 50, 657, DateTimeKind.Utc).AddTicks(3060),
                            Summary = "Sweltering",
                            TemperatureC = -16
                        },
                        new
                        {
                            Id = 38,
                            DateTimeAt = new DateTime(2023, 7, 25, 11, 3, 50, 657, DateTimeKind.Utc).AddTicks(3060),
                            Summary = "Mild",
                            TemperatureC = 34
                        },
                        new
                        {
                            Id = 39,
                            DateTimeAt = new DateTime(2023, 7, 26, 11, 3, 50, 657, DateTimeKind.Utc).AddTicks(3060),
                            Summary = "Balmy",
                            TemperatureC = 30
                        },
                        new
                        {
                            Id = 40,
                            DateTimeAt = new DateTime(2023, 7, 27, 11, 3, 50, 657, DateTimeKind.Utc).AddTicks(3060),
                            Summary = "Bracing",
                            TemperatureC = 22
                        },
                        new
                        {
                            Id = 41,
                            DateTimeAt = new DateTime(2023, 7, 28, 11, 3, 50, 657, DateTimeKind.Utc).AddTicks(3060),
                            Summary = "Scorching",
                            TemperatureC = 9
                        },
                        new
                        {
                            Id = 42,
                            DateTimeAt = new DateTime(2023, 7, 29, 11, 3, 50, 657, DateTimeKind.Utc).AddTicks(3060),
                            Summary = "Scorching",
                            TemperatureC = -11
                        },
                        new
                        {
                            Id = 43,
                            DateTimeAt = new DateTime(2023, 7, 30, 11, 3, 50, 657, DateTimeKind.Utc).AddTicks(3060),
                            Summary = "Cool",
                            TemperatureC = -7
                        },
                        new
                        {
                            Id = 44,
                            DateTimeAt = new DateTime(2023, 7, 31, 11, 3, 50, 657, DateTimeKind.Utc).AddTicks(3060),
                            Summary = "Bracing",
                            TemperatureC = 35
                        },
                        new
                        {
                            Id = 45,
                            DateTimeAt = new DateTime(2023, 8, 1, 11, 3, 50, 657, DateTimeKind.Utc).AddTicks(3060),
                            Summary = "Freezing",
                            TemperatureC = 34
                        },
                        new
                        {
                            Id = 46,
                            DateTimeAt = new DateTime(2023, 8, 2, 11, 3, 50, 657, DateTimeKind.Utc).AddTicks(3060),
                            Summary = "Cool",
                            TemperatureC = -2
                        },
                        new
                        {
                            Id = 47,
                            DateTimeAt = new DateTime(2023, 8, 3, 11, 3, 50, 657, DateTimeKind.Utc).AddTicks(3060),
                            Summary = "Balmy",
                            TemperatureC = -3
                        },
                        new
                        {
                            Id = 48,
                            DateTimeAt = new DateTime(2023, 8, 4, 11, 3, 50, 657, DateTimeKind.Utc).AddTicks(3060),
                            Summary = "Freezing",
                            TemperatureC = 13
                        },
                        new
                        {
                            Id = 49,
                            DateTimeAt = new DateTime(2023, 8, 5, 11, 3, 50, 657, DateTimeKind.Utc).AddTicks(3060),
                            Summary = "Hot",
                            TemperatureC = 13
                        },
                        new
                        {
                            Id = 50,
                            DateTimeAt = new DateTime(2023, 8, 6, 11, 3, 50, 657, DateTimeKind.Utc).AddTicks(3060),
                            Summary = "Balmy",
                            TemperatureC = 8
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
